//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: i32,
    pub user_name: String,
    pub authority: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub phone: Option<String>,
    pub email: String,
    #[sea_orm(column_type = "Text")]
    pub address: String,
    pub create_time: DateTime,
    pub article_num: i64,
    pub album_num: i64,
    pub pwd_hash: String,
    pub user_status: i16,
    pub visit_count: i64,
    pub read_count: i64,
    pub messages_count: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::article::Entity")]
    Article,
    #[sea_orm(has_many = "super::article_archive::Entity")]
    ArticleArchive,
    #[sea_orm(has_many = "super::article_category::Entity")]
    ArticleCategory,
    #[sea_orm(has_many = "super::article_tag::Entity")]
    ArticleTag,
}

impl Related<super::article::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Article.def()
    }
}

impl Related<super::article_archive::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleArchive.def()
    }
}

impl Related<super::article_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleCategory.def()
    }
}

impl Related<super::article_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleTag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
